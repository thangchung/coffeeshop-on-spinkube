// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod exports {
    pub mod coffeeshop {
        pub mod product {
            #[allow(clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum ItemType {
                    /// Beverages
                    Cappuccino,
                    CoffeeBlack,
                    CoffeeWithRoom,
                    Espresso,
                    EspressoDouble,
                    Latte,
                    /// Food
                    Cakepop,
                    Croissant,
                    Muffin,
                    CroissantChocolate,
                }
                impl ::core::fmt::Debug for ItemType {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            ItemType::Cappuccino => f.debug_tuple("ItemType::Cappuccino").finish(),
                            ItemType::CoffeeBlack => {
                                f.debug_tuple("ItemType::CoffeeBlack").finish()
                            }
                            ItemType::CoffeeWithRoom => {
                                f.debug_tuple("ItemType::CoffeeWithRoom").finish()
                            }
                            ItemType::Espresso => f.debug_tuple("ItemType::Espresso").finish(),
                            ItemType::EspressoDouble => {
                                f.debug_tuple("ItemType::EspressoDouble").finish()
                            }
                            ItemType::Latte => f.debug_tuple("ItemType::Latte").finish(),
                            ItemType::Cakepop => f.debug_tuple("ItemType::Cakepop").finish(),
                            ItemType::Croissant => f.debug_tuple("ItemType::Croissant").finish(),
                            ItemType::Muffin => f.debug_tuple("ItemType::Muffin").finish(),
                            ItemType::CroissantChocolate => {
                                f.debug_tuple("ItemType::CroissantChocolate").finish()
                            }
                        }
                    }
                }

                impl ItemType {
                    pub(crate) unsafe fn _lift(val: u8) -> ItemType {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => ItemType::Cappuccino,
                            1 => ItemType::CoffeeBlack,
                            2 => ItemType::CoffeeWithRoom,
                            3 => ItemType::Espresso,
                            4 => ItemType::EspressoDouble,
                            5 => ItemType::Latte,
                            6 => ItemType::Cakepop,
                            7 => ItemType::Croissant,
                            8 => ItemType::Muffin,
                            9 => ItemType::CroissantChocolate,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[derive(Clone)]
                pub struct ItemTypeModel {
                    pub name: _rt::String,
                    pub item_type: ItemType,
                    pub price: f32,
                    pub image: _rt::String,
                }
                impl ::core::fmt::Debug for ItemTypeModel {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ItemTypeModel")
                            .field("name", &self.name)
                            .field("item-type", &self.item_type)
                            .field("price", &self.price)
                            .field("image", &self.image)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_item_types_cabi<T: Guest>() -> *mut u8 {
                    let result0 = T::get_item_types();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec5 = result0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 24, 4);
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5.add(i * 24);
                        {
                            let ItemTypeModel {
                                name: name2,
                                item_type: item_type2,
                                price: price2,
                                image: image2,
                            } = e;
                            let vec3 = (name2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            *base.add(8).cast::<u8>() = (item_type2.clone() as i32) as u8;
                            *base.add(12).cast::<f32>() = _rt::as_f32(price2);
                            let vec4 = (image2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base.add(20).cast::<usize>() = len4;
                            *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len5;
                    *ptr1.add(0).cast::<*mut u8>() = result5;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_item_types<T: Guest>(arg0: *mut u8) {
                    let l4 = *arg0.add(0).cast::<*mut u8>();
                    let l5 = *arg0.add(4).cast::<usize>();
                    let base6 = l4;
                    let len6 = l5;
                    for i in 0..len6 {
                        let base = base6.add(i * 24);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                            let l2 = *base.add(16).cast::<*mut u8>();
                            let l3 = *base.add(20).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(base6, len6 * 24, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_item_by_types_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    let base3 = arg0;
                    let len3 = arg1;
                    let mut result3 = _rt::Vec::with_capacity(len3);
                    for i in 0..len3 {
                        let base = base3.add(i * 8);
                        let e3 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);

                            _rt::string_lift(bytes2)
                        };
                        result3.push(e3);
                    }
                    _rt::cabi_dealloc(base3, len3 * 8, 4);
                    let result4 = T::get_item_by_types(result3);
                    let ptr5 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec9 = result4;
                    let len9 = vec9.len();
                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(vec9.len() * 24, 4);
                    let result9 = if layout9.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout9);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec9.into_iter().enumerate() {
                        let base = result9.add(i * 24);
                        {
                            let ItemTypeModel {
                                name: name6,
                                item_type: item_type6,
                                price: price6,
                                image: image6,
                            } = e;
                            let vec7 = (name6.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *base.add(4).cast::<usize>() = len7;
                            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                            *base.add(8).cast::<u8>() = (item_type6.clone() as i32) as u8;
                            *base.add(12).cast::<f32>() = _rt::as_f32(price6);
                            let vec8 = (image6.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *base.add(20).cast::<usize>() = len8;
                            *base.add(16).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    }
                    *ptr5.add(4).cast::<usize>() = len9;
                    *ptr5.add(0).cast::<*mut u8>() = result9;
                    ptr5
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_item_by_types<T: Guest>(arg0: *mut u8) {
                    let l4 = *arg0.add(0).cast::<*mut u8>();
                    let l5 = *arg0.add(4).cast::<usize>();
                    let base6 = l4;
                    let len6 = l5;
                    for i in 0..len6 {
                        let base = base6.add(i * 24);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                            let l2 = *base.add(16).cast::<*mut u8>();
                            let l3 = *base.add(20).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(base6, len6 * 24, 4);
                }
                pub trait Guest {
                    fn get_item_types() -> _rt::Vec<ItemTypeModel>;
                    fn get_item_by_types(types: _rt::Vec<_rt::String>) -> _rt::Vec<ItemTypeModel>;
                }
                #[doc(hidden)]

                macro_rules! __export_coffeeshop_product_api_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "coffeeshop:product/api#get-item-types"]
        unsafe extern "C" fn export_get_item_types() -> *mut u8 {
          $($path_to_types)*::_export_get_item_types_cabi::<$ty>()
        }
        #[export_name = "cabi_post_coffeeshop:product/api#get-item-types"]
        unsafe extern "C" fn _post_return_get_item_types(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_get_item_types::<$ty>(arg0)
        }
        #[export_name = "coffeeshop:product/api#get-item-by-types"]
        unsafe extern "C" fn export_get_item_by_types(arg0: *mut u8,arg1: usize,) -> *mut u8 {
          $($path_to_types)*::_export_get_item_by_types_cabi::<$ty>(arg0, arg1)
        }
        #[export_name = "cabi_post_coffeeshop:product/api#get-item-by-types"]
        unsafe extern "C" fn _post_return_get_item_by_types(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_get_item_by_types::<$ty>(arg0)
        }
      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_coffeeshop_product_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_core_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::coffeeshop::product::api::__export_coffeeshop_product_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::coffeeshop::product::api);
  )
}
#[doc(inline)]
pub(crate) use __export_core_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:core:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 441] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xbe\x02\x01A\x02\x01\
A\x02\x01B\x0a\x01m\x0a\x0acappuccino\x0ccoffee-black\x10coffee-with-room\x08esp\
resso\x0fespresso-double\x05latte\x07cakepop\x09croissant\x06muffin\x13croissant\
-chocolate\x04\0\x09item-type\x03\0\0\x01r\x04\x04names\x09item-type\x01\x05pric\
ev\x05images\x04\0\x0fitem-type-model\x03\0\x02\x01p\x03\x01@\0\0\x04\x04\0\x0eg\
et-item-types\x01\x05\x01ps\x01@\x01\x05types\x06\0\x04\x04\0\x11get-item-by-typ\
es\x01\x07\x04\x01\x16coffeeshop:product/api\x05\0\x04\x01\x17coffeeshop:product\
/core\x04\0\x0b\x0a\x01\0\x04core\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
